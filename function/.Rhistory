}
ARI
z <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_csv/t2_4.csv",
header = F)
ng <- dim(z)[2]
idx <- round(ng/5):ng
z_use <- t(as.matrix(z[,idx]))
K <- max(z_use)
res <- label.switching(method = "ECR-ITERATIVE-1",
z = z_use, K = K)
zMAP <- c(res$clusters)
zMAP_unique <- sort(unique(zMAP))
zMAP2 <- zMAP
for(kk in 1:length(zMAP_unique)){
zMAP2[zMAP == zMAP_unique[kk]] <- kk
}
write.csv(zMAP2,"C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z4.csv")
z <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_csv/t2_3.csv",
header = F)
ng <- dim(z)[2]
idx <- round(ng/5):ng
z_use <- t(as.matrix(z[,idx]))
K <- max(z_use)
res <- label.switching(method = "ECR-ITERATIVE-1",
z = z_use, K = K)
zMAP <- c(res$clusters)
zMAP_unique <- sort(unique(zMAP))
zMAP2 <- zMAP
for(kk in 1:length(zMAP_unique)){
zMAP2[zMAP == zMAP_unique[kk]] <- kk
}
write.csv(zMAP2,"C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z3.csv")
z <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_csv/t2_2.csv",
header = F)
ng <- dim(z)[2]
idx <- round(ng/5):ng
z_use <- t(as.matrix(z[,idx]))
K <- max(z_use)
res <- label.switching(method = "ECR-ITERATIVE-1",
z = z_use, K = K)
zMAP <- c(res$clusters)
zMAP_unique <- sort(unique(zMAP))
zMAP2 <- zMAP
for(kk in 1:length(zMAP_unique)){
zMAP2[zMAP == zMAP_unique[kk]] <- kk
}
write.csv(zMAP2,"C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z2.csv")
z <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_csv/t2_1.csv",
header = F)
ng <- dim(z)[2]
idx <- round(ng/5):ng
z_use <- t(as.matrix(z[,idx]))
K <- max(z_use)
res <- label.switching(method = "ECR-ITERATIVE-1",
z = z_use, K = K)
zMAP <- c(res$clusters)
zMAP_unique <- sort(unique(zMAP))
zMAP2 <- zMAP
for(kk in 1:length(zMAP_unique)){
zMAP2[zMAP == zMAP_unique[kk]] <- kk
}
write.csv(zMAP2,"C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z1.csv")
####
rm(list = ls())
z1 <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z1.csv")[,2]
z2 <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z2.csv")[,2]
z3 <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z3.csv")[,2]
z4 <- read.csv("C:/Users/gaw19004/Desktop/new_pixel/lab_proc/t2_z4.csv")[,2]
z_all <- cbind(z1,z2,z3,z4)
ARI <- matrix(NA, nrow = 4, ncol = 4)
for(r in 1:4){
for(c in 1:4){
ARI[r,c] <- adjustedRandIndex(z_all[,r], z_all[,c])
}
}
ARI
paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use", "sdf")
paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use", "sdf", "sdf")
ep = 1
rep=1
paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t", ep, "_", rep, ".csv")
for(ep in 1:5){
for(rep in 1:2){
print(paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t", ep, "_", rep, ".csv"))
}
}
paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t",
ep, "_", rep, ".csv")
z <- read.csv(paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t",
ep, "_", rep, ".csv"),
header = F)
ng <- dim(z)[2]
idx <- round(ng/2):ng
z_use <- t(as.matrix(z[,idx]))
K <- max(z_use)
res <- label.switching(method = "ECR-ITERATIVE-1",
z = z_use, K = K)
zMAP <- c(res$clusters)
zMAP_unique <- sort(unique(zMAP))
zMAP2 <- zMAP
for(kk in 1:length(zMAP_unique)){
zMAP2[zMAP == zMAP_unique[kk]] <- kk
}
zMAP2
?list
zlab1 <- matrix(NA, 5, 83)
zlab2 <- matrix(NA, 5, 83)
list(zlab1, zlab2)
zlab_each <- matrix(NA, 5, 83)
zlab <- list(zlab_each, zlab_each)
zlab[[rep]][ep,]
zlab_each <- matrix(NA, 5, 83)
zlab <- list(zlab_each, zlab_each)
for(ep in 1:5){
for(rep in 1:2){
z <- read.csv(paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t",
ep, "_", rep, ".csv"),
header = F)
ng <- dim(z)[2]
idx <- round(ng/2):ng
z_use <- t(as.matrix(z[,idx]))
K <- max(z_use)
res <- label.switching(method = "ECR-ITERATIVE-1",
z = z_use, K = K)
zMAP <- c(res$clusters)
zMAP_unique <- sort(unique(zMAP))
zMAP2 <- zMAP
for(kk in 1:length(zMAP_unique)){
zMAP2[zMAP == zMAP_unique[kk]] <- kk
}
zlab[[rep]][ep,] <- zMAP2
}
}
ari_self <- rep(NA, 5)
for(ep in 1:5){
ari_self[ep] <- adjustedRandIndex(zlab[[1]][ep,], zlab[[2]][ep,])
}
ari_self
?array
array(NA, dim = c(5,5,4))
ari_cross <- array(NA, dim = c(5,5,4))
ari_cross
ari_cross[[1]]
ari_cross[, , 4]
ari_cross <- array(NA, dim = c(5,5,4))
count <- 1
for(rep1 in 1:2){
for(rep2 in 1:2){
for(r in 1:5){
for(c in 1:5){
ari_cross[r,c,count] <- adjustedRandIndex(zlab[[rep1]][r,], zlab[[rep2]][r,])
}
}
count <- count + 1
}
}
ari_cross
ari_cross <- array(NA, dim = c(5,5,4))
count <- 1
for(rep1 in 1:2){
for(rep2 in 1:2){
for(r in 1:5){
for(c in 1:5){
ari_cross[r,c,count] <- adjustedRandIndex(zlab[[rep1]][r,], zlab[[rep2]][c,])
}
}
count <- count + 1
}
}
ari_cross
ari_cross <- array(NA, dim = c(5,5,4))
count <- 1
for(rep1 in 1:2){
for(rep2 in 1:2){
for(r in 2:5){
for(c in 1:(r-1)){
ari_cross[r,c,count] <- adjustedRandIndex(zlab[[rep1]][r,], zlab[[rep2]][c,])
}
}
count <- count + 1
}
}
ari_cross
?mean
apply(ari_cross, 3, mean)
apply(ari_cross, 1, mean)
apply(ari_cross, 2, mean)
apply(ari_cross, c(1,2), mean)
ARIout <- apply(ari_cross, c(1,2), mean)
diag(ARIout) <- ari_self
ARIout
apply(ari_cross, c(1,2), min)
apply(ari_cross, c(1,2), max)
ARIout <- apply(ari_cross, c(1,2), mean)
diag(ARIout) <- ari_self
ARImin <- apply(ari_cross, c(1,2), min)
ARImax <- apply(ari_cross, c(1,2), max)
ARIout
ARImin
ARImax
write.csv(ARIout,"C:/Users/gaw19004/Desktop/new_pixel/lab_map/ari.csv")
write.csv(ARImin,"C:/Users/gaw19004/Desktop/new_pixel/lab_map/ariMin.csv")
write.csv(ARImax,"C:/Users/gaw19004/Desktop/new_pixel/lab_map/ariMax.csv")
library(mcclust)
rm(list = ls())
zlab_each <- matrix(NA, 5, 83)
zlab <- list(zlab_each, zlab_each)
for(ep in 1:5){
for(rep in 1:2){
z <- read.csv(paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t",
ep, "_", rep, ".csv"),
header = F)
ng <- dim(z)[2]
idx <- round(ng/5):ng
z_use <- t(as.matrix(z[,idx]))
psm <- comp.psm(z_use)
res <- maxpear(psm)
z2 <- res$cl
zlab[[rep]][ep,] <- z2
}
}
ari_self <- rep(NA, 5)
for(ep in 1:5){
ari_self[ep] <- adjustedRandIndex(zlab[[1]][ep,], zlab[[2]][ep,])
}
ari_cross <- array(NA, dim = c(5,5,4))
count <- 1
for(rep1 in 1:2){
for(rep2 in 1:2){
for(r in 2:5){
for(c in 1:(r-1)){
ari_cross[r,c,count] <- adjustedRandIndex(zlab[[rep1]][r,], zlab[[rep2]][c,])
}
}
count <- count + 1
}
}
ARIout <- apply(ari_cross, c(1,2), mean)
diag(ARIout) <- ari_self
ARImin <- apply(ari_cross, c(1,2), min)
ARImax <- apply(ari_cross, c(1,2), max)
ARIout
rm(list = ls())
zlab_each <- matrix(NA, 5, 83)
zlab <- list(zlab_each, zlab_each)
for(ep in 1:5){
for(rep in 1:2){
z <- read.csv(paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t",
ep, "_", rep, ".csv"),
header = F)
ng <- dim(z)[2]
idx <- round(ng/2):ng
z_use <- t(as.matrix(z[,idx]))
psm <- comp.psm(z_use)
res <- maxpear(psm)
z2 <- res$cl
zlab[[rep]][ep,] <- z2
}
}
ari_self <- rep(NA, 5)
for(ep in 1:5){
ari_self[ep] <- adjustedRandIndex(zlab[[1]][ep,], zlab[[2]][ep,])
}
ari_cross <- array(NA, dim = c(5,5,4))
count <- 1
for(rep1 in 1:2){
for(rep2 in 1:2){
for(r in 2:5){
for(c in 1:(r-1)){
ari_cross[r,c,count] <- adjustedRandIndex(zlab[[rep1]][r,], zlab[[rep2]][c,])
}
}
count <- count + 1
}
}
ARIout <- apply(ari_cross, c(1,2), mean)
diag(ARIout) <- ari_self
ARImin <- apply(ari_cross, c(1,2), min)
ARImax <- apply(ari_cross, c(1,2), max)
ARIout
ARImin
ARImax
ARIout
# install.packages("mclust")
library(label.switching)
library(mclust)
library(mcclust)
#############################################
#### get MAP, deal with label switching
zlab_each <- matrix(NA, 5, 83)
zlab <- list(zlab_each, zlab_each)
for(ep in 1:5){
for(rep in 1:2){
z <- read.csv(paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t",
ep, "_", rep, ".csv"),
header = F)
ng <- dim(z)[2]
idx <- round(ng/2):ng
z_use <- t(as.matrix(z[,idx]))
K <- max(z_use)
res <- label.switching(method = "ECR-ITERATIVE-1",
z = z_use, K = K)
zMAP <- c(res$clusters)
zMAP_unique <- sort(unique(zMAP))
zMAP2 <- zMAP
for(kk in 1:length(zMAP_unique)){
zMAP2[zMAP == zMAP_unique[kk]] <- kk
}
zlab[[rep]][ep,] <- zMAP2
}
}
zlab_each
zMAP_use <- zlab_each
rep_use <- c(2, 2, 1, 1,2)
for(ep in 1:5){
zMAP_use[ep,] <- zlab[[rep_use[ep]]][ep,]
}
zMAP_use
write.csv(zMAP_use,"C:/Users/gaw19004/Desktop/new_pixel/lab_map/zMAP.csv")
zMAP_use
rm(list = ls())
zlab_each <- matrix(NA, 5, 83)
zlab <- list(zlab_each, zlab_each)
for(ep in 1:5){
for(rep in 1:2){
z <- read.csv(paste0("C:/Users/gaw19004/Desktop/new_pixel/data_use/t",
ep, "_", rep, ".csv"),
header = F)
ng <- dim(z)[2]
idx <- round(ng/2):ng
z_use <- t(as.matrix(z[,idx]))
psm <- comp.psm(z_use)
res <- maxpear(psm)
z2 <- res$cl
zlab[[rep]][ep,] <- z2
}
}
zMAP_use <- zlab_each
rep_use <- c(2, 2, 1, 1,2)
for(ep in 1:5){
zMAP_use[ep,] <- zlab[[rep_use[ep]]][ep,]
}
ari_self <- rep(NA, 5)
for(ep in 1:5){
ari_self[ep] <- adjustedRandIndex(zlab[[1]][ep,], zlab[[2]][ep,])
}
ari_cross <- array(NA, dim = c(5,5,4))
count <- 1
for(rep1 in 1:2){
for(rep2 in 1:2){
for(r in 2:5){
for(c in 1:(r-1)){
ari_cross[r,c,count] <- adjustedRandIndex(zlab[[rep1]][r,], zlab[[rep2]][c,])
}
}
count <- count + 1
}
}
ARIout <- apply(ari_cross, c(1,2), mean)
diag(ARIout) <- ari_self
ARImin <- apply(ari_cross, c(1,2), min)
ARImax <- apply(ari_cross, c(1,2), max)
write.csv(zMAP_use,"C:/Users/gaw19004/Desktop/new_pixel/lab_mp/zMAP.csv")
write.csv(ARIout,"C:/Users/gaw19004/Desktop/new_pixel/lab_mp/ari.csv")
write.csv(ARImin,"C:/Users/gaw19004/Desktop/new_pixel/lab_mp/ariMin.csv")
write.csv(ARImax,"C:/Users/gaw19004/Desktop/new_pixel/lab_mp/ariMax.csv")
install.packages('bpr')
library(bpr)
install.packages('limma')
install.packages("INLA",
repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
/usr/bin/cp --help
library(INLA)
?inla
install.packages("rstanarm")
install.packages(c("BH", "StanHeaders", "Rcpp", "RcppEigen", "RcppParallel", "inline", "loo", "pkgbuild", "rstan"))
library(Rcpp)
library(rstanarm)
# library(bpr)
library(INLA)
library(pgdraw)
library(mvtnorm)
#############################################
#### load functions
usr_dir <- 'C:\\Users\\gaw19004\\Documents\\GitHub\\MFM_DPFA_Rversion'
# usr_dir <- 'D:\\github\\MFM_DPFA_Rversion'
setwd(paste0(usr_dir,'\\function'))
source('sample_prior.R')
source('update_clusParam_PG.R')
## make stand-alone Rcpp function later...
cppFunction('arma::mat FFBS(arma::mat A,
arma::vec b,
arma::vec m0,
arma::mat V0,
arma::mat Sig,
arma::mat Yhat_tmp,
arma::mat X_tmp,
arma::mat w_tmp,
int T,
int p){
arma::vec Tvec = arma::linspace(0, T-1, T);
arma::mat m_tmp(p,T);
arma::cube V_tmp(p,p,T);
// return
arma::mat BETA_b(p,T);
arma::mat Kt;
arma::mat m_tt_1;
arma::mat V_tt_1;
// (1) FF: forward-sampling
for(int t = 0; t < T; ++t){
// prediction
if(t == 0){
m_tt_1 = A*m0 + b;
V_tt_1 = A*V0*A.t() + Sig;
}else{
m_tt_1 = A*m_tmp.col(t-1) + b;
V_tt_1 = A*V_tmp.slice(t-1)*A.t() + Sig;
}
arma::uvec idx = arma::find_finite(Yhat_tmp.col(t));
arma::mat X_tmp2 = X_tmp.rows(idx);
arma::vec w_tmp2 = w_tmp.submat(idx,find(Tvec == t));
arma::mat Yhat_tmp2 = Yhat_tmp.submat(idx,find(Tvec == t));
// filtering
Kt = V_tt_1 * X_tmp2.t()*
inv(X_tmp2 * V_tt_1 *X_tmp2.t() + diagmat(1/w_tmp2));
m_tmp.col(t) = m_tt_1 + Kt*(Yhat_tmp2 - X_tmp2*m_tt_1);
V_tmp.slice(t) = (arma::eye(p,p) - Kt*X_tmp2)*V_tt_1;
V_tmp.slice(t) = (V_tmp.slice(t) + V_tmp.slice(t).t())/2;
}
// (2) BS: backward sampling
BETA_b.col(T-1) = mvrnormArma(1,
m_tmp.col(T-1),V_tmp.slice(T-1));
for(int t = T-2; t >= 0; t--){
arma::mat Jt = V_tmp.slice(t) *A.t()*
inv(A*V_tmp.slice(t)*A.t() + Sig);
arma::vec mstar_tmp = m_tmp.col(t) +
Jt*(BETA_b.col(t+1) - A*m_tmp.col(t) - b);
arma::mat Vstar_tmp = (arma::eye(p,p) - Jt*A)*V_tmp.slice(t);
Vstar_tmp = (Vstar_tmp + Vstar_tmp.t())/2;
BETA_b.col(t) = mvrnormArma(1,mstar_tmp,Vstar_tmp);
}
return BETA_b;
}',depends="RcppArmadillo",
includes = 'arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma) {
int ncols = sigma.n_cols;
arma::mat Y = arma::randn(n, ncols);
return arma::trans(arma::repmat(mu, 1, n).t() + Y * arma::chol(sigma));
}')
library(Rcpp)
cppFunction('arma::mat FFBS(arma::mat A,
arma::vec b,
arma::vec m0,
arma::mat V0,
arma::mat Sig,
arma::mat Yhat_tmp,
arma::mat X_tmp,
arma::mat w_tmp,
int T,
int p){
arma::vec Tvec = arma::linspace(0, T-1, T);
arma::mat m_tmp(p,T);
arma::cube V_tmp(p,p,T);
// return
arma::mat BETA_b(p,T);
arma::mat Kt;
arma::mat m_tt_1;
arma::mat V_tt_1;
// (1) FF: forward-sampling
for(int t = 0; t < T; ++t){
// prediction
if(t == 0){
m_tt_1 = A*m0 + b;
V_tt_1 = A*V0*A.t() + Sig;
}else{
m_tt_1 = A*m_tmp.col(t-1) + b;
V_tt_1 = A*V_tmp.slice(t-1)*A.t() + Sig;
}
arma::uvec idx = arma::find_finite(Yhat_tmp.col(t));
arma::mat X_tmp2 = X_tmp.rows(idx);
arma::vec w_tmp2 = w_tmp.submat(idx,find(Tvec == t));
arma::mat Yhat_tmp2 = Yhat_tmp.submat(idx,find(Tvec == t));
// filtering
Kt = V_tt_1 * X_tmp2.t()*
inv(X_tmp2 * V_tt_1 *X_tmp2.t() + diagmat(1/w_tmp2));
m_tmp.col(t) = m_tt_1 + Kt*(Yhat_tmp2 - X_tmp2*m_tt_1);
V_tmp.slice(t) = (arma::eye(p,p) - Kt*X_tmp2)*V_tt_1;
V_tmp.slice(t) = (V_tmp.slice(t) + V_tmp.slice(t).t())/2;
}
// (2) BS: backward sampling
BETA_b.col(T-1) = mvrnormArma(1,
m_tmp.col(T-1),V_tmp.slice(T-1));
for(int t = T-2; t >= 0; t--){
arma::mat Jt = V_tmp.slice(t) *A.t()*
inv(A*V_tmp.slice(t)*A.t() + Sig);
arma::vec mstar_tmp = m_tmp.col(t) +
Jt*(BETA_b.col(t+1) - A*m_tmp.col(t) - b);
arma::mat Vstar_tmp = (arma::eye(p,p) - Jt*A)*V_tmp.slice(t);
Vstar_tmp = (Vstar_tmp + Vstar_tmp.t())/2;
BETA_b.col(t) = mvrnormArma(1,mstar_tmp,Vstar_tmp);
}
return BETA_b;
}',depends="RcppArmadillo",
includes = 'arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma) {
int ncols = sigma.n_cols;
arma::mat Y = arma::randn(n, ncols);
return arma::trans(arma::repmat(mu, 1, n).t() + Y * arma::chol(sigma));
}')
cppFunction('int one() {
return 1;
}')
